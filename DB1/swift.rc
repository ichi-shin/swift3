#!/bin/bash
#
# Copyright (c) 2014 OpenStack Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_token()
{
    if [ "$_TOKEN" != "" ]; then
	echo -n $_TOKEN
	return
    fi

    local json="{\"auth\": {\"tenantName\": \"${ADMIN_TENANT}\", 
\"passwordCredentials\": 
{\"username\": \"${ADMIN_USER}\", \"password\": \"${ADMIN_PASS}\"}}}"

    case "$AUTH"
    in
	tempauth)
	    $CURL_PROG -s -I -X GET \
		-H "x-storage-user: ${ADMIN_TENANT}:${ADMIN_USER}" \
		-H "x-storage-pass: ${ADMIN_PASS}" \
		http://${SWIFT_HOST}/auth/v1.0 | \
		grep -i x-storage-token | \
		$AWK_PROG '{print $2}' | _filter_eol
	    ;;
	keystone)
	    $CURL_PROG -s -d "$json" -H 'Content-type: application/json' \
		http://${KEYSTONE_HOST}/v2.0/tokens | \
		${JQ_PROG} -M .access.token.id | \
		${SED_PROG} s/\"//g
	    ;;
	*)
	    _die "unknown auth, $AUTH"
	    ;;
    esac
}

_tenant()
{
    if [ "$_TENANT" != "" ]; then
	echo -n $_TENANT
	return
    fi

    local json="{\"auth\": {\"tenantName\": \"${TEST1_TENANT}\", 
\"passwordCredentials\": 
{\"username\": \"${TEST1_USER}\", \"password\": \"${TEST1_PASS}\"}}}"

    case "$AUTH"
    in
	tempauth)
	    echo -n AUTH_$TEST1_TENANT
	    ;;
	keystone)
	    local tenant_id=$($CURL_PROG -s -d "$json" \
		-H 'Content-type: application/json' \
		http://${KEYSTONE_HOST}/v2.0/tokens | \
		${JQ_PROG} -M .access.token.tenant.id | \
		${SED_PROG} s/\"//g)
	    echo -n AUTH_${tenant_id}
	    ;;
	*)
	    _die "unknown auth, $AUTH"
	    ;;
    esac
}

_swcurl()
{
    local tmp_file=$tmp.$RANDOM

    $CURL_PROG -s -H "x-storage-token: $(_token)" "$@" -w '%{http_code}' \
	> $tmp_file

    status=$(tail -c -3 $tmp_file)
    echo "> curl $@... $status" | _filter_curl_command >&2

    head -c -3  $tmp_file

    _check_http_success $status
}

_sw_head()
{
    local path=$1; shift

    _swcurl -I -X HEAD "$@" http://${SWIFT_HOST}/v1/$(_tenant)${path}
}

_sw_get()
{
    local path=$1; shift

    _swcurl -X GET "$@" http://${SWIFT_HOST}/v1/$(_tenant)${path}
}

_sw_put()
{
    local path=$1; shift

    _swcurl -X PUT "$@" http://${SWIFT_HOST}/v1/$(_tenant)${path}
}

_sw_post()
{
    local path=$1; shift

    _swcurl -X POST "$@" http://${SWIFT_HOST}/v1/$(_tenant)${path}
}

_sw_delete()
{
    local path=$1; shift

    _swcurl -X DELETE "$@" http://${SWIFT_HOST}/v1/$(_tenant)${path}
}

_sw_conf_get()
{
    local path=$1; shift

    _swcurl -X GET "$@" http://${SWIFT_HOST}/v1/.swift3${path}
}

_sw_setup()
{
    export _TOKEN=$(_token)
    export _TENANT=$(_tenant)
}

_x_timestamp()
{
    local path=$1

    _sw_head $1 | _hq 'x-timestamp'
}

_s3_timestamp()
{
    local path=$1

    _sw_head $1 | _hq 'x-(container|object)-meta-\[swift3\]-timestamp'
}

_sw_cleanup()
{
    local c
    local o

    # remove user data
    for c in $(_sw_get / 2>/dev/null); do
	_retry _sw_post /$c -H "x-versions-location: $c"  # disable versioning
	for o in $(_sw_get /$c 2>/dev/null); do
	    _retry _sw_delete /$c/$o
	done
	_retry _sw_delete /$c
    done
}

# make sure this script returns success
/bin/true
